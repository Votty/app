{"version":3,"sources":["components/CandidateList.jsx","components/Register.jsx","components/Admin.jsx","App.js","serviceWorker.js","index.js","components/img/voldemort.jpg","components/img/darkvador.jpg","components/img/thanos.jpg"],"names":["CandidateList","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","src","logo_darkvador","alt","logo_thanos","logo_voldemort","React","Component","Register","props","_this","call","state","userId","session","localStorage","getItem","voted","votedFor","loaded","emptyInput","isHovered","clickOnMail","accountCreated","loadCandidateList","isDone","updateInputIcon","bind","assertThisInitialized","handleHover","logOut","event","setState","target","prevState","document","getElementById","reset","candidates","text1","text2","logged","btnStyle","cursor","CandidateList_CandidateList","id","onChange","type","placeholder","autoComplete","style","onMouseEnter","onMouseLeave","onClick","toUpperCase","Admin","today","Date","now","date","getFullYear","getMonth","getDate","mode","step","title","startingDay","endingDay","endTime","startTime","popup","newCandidate_description","newCandidate_image","newCandidate_name","success","setMode","setStep","setTitle","setStartingDay","setEndingDay","setStartTime","setEndTime","createNewCandidate","addNewCandidate","removeCandidate","setDescription","setName","setImage","closePopup","finishCreation","setSuccess","resetForm","resetCandidateForm","resetStep2","resetStep1","e","time","preventDefault","index","temp","slice","splice","newCandidate","replace","push","JSON","parse","_this2","_this3","href","textDecoration","role","data-dismiss","aria-label","aria-hidden","name","cols","rows","min","bundle_default","start","end","map","candidate","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.80a492fe.chunk.js","sourcesContent":["import React from 'react';\nimport logo_voldemort from './img/voldemort.jpg'\nimport logo_darkvador from './img/darkvador.jpg'\nimport logo_thanos from './img/thanos.jpg'\n\n//Used to display the candidate list\n\nexport class CandidateList extends React.Component {\n    render() {\n    return (\n        <div className=\"candidates-list\">\n            <div className=\"loadContent\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col text-center candidate mb-4 px-5\">\n                            <h2 className=\"text-uppercase my-1 font-weight-light \">\n                                Dark Vador                                       \n                            </h2>\n                            <div className=\"img-block mt-2 mb-2\">\n                                <img  src={logo_darkvador} alt=\"Dark Vador\"/>\n                            </div>\n                            <div>\n                                <div className=\"hover false\">\n                                    <div className=\"loadedContent\"></div>\n                                </div> \n                            </div>\n                        </div>\n                        <div className=\"col text-center candidate mb-4 px-5\">\n                        <h2 className=\" text-uppercase my-1 font-weight-light\">\n                            Thanos                                       \n                        </h2>\n                        <div className=\"img-block mt-2 mb-2\">\n                            <img  src={logo_thanos} alt=\"Thanos\"/>\n                        </div>\n                        <div>\n                            <div className=\"hover false\">\n                                <div className=\"loadedContent\"> </div>\n                            </div> \n                        </div>\n                    </div>\n                    <div className=\"col text-center candidate mb-4 px-5\">\n                        <h2 className=\" text-uppercase my-1 font-weight-light\">\n                            Voldemort                                       \n                        </h2>\n                        <div className=\"img-block mt-2 mb-2\">\n                            <img  src={logo_voldemort} alt=\"Voldemort\"/>\n                        </div>\n                        <div>\n                            <div className=\"hover false\">\n                                <div className=\"loadedContent\"></div>\n                            </div> \n                        </div>\n                    </div>  \n                    </div>                   \n                </div>\n            </div>\n        </div>\n    );\n  }\n}\n","import React from 'react';\nimport { CandidateList } from './CandidateList.jsx';\n\n\n\n\nexport class Register extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userId: '',\n            session: localStorage.getItem('session'), // if logged this will contail the userId email\n            voted: localStorage.getItem('voted'), // user voted or not\n            votedFor: localStorage.getItem('votedFor'), // candidate voted for\n            loaded: true,\n            emptyInput: true,\n            isHovered: false,\n            clickOnMail: false,\n            accountCreated: false,\n            loadCandidateList: false,\n            isDone: false,\n        };\n\n        this.updateInputIcon = this.updateInputIcon.bind(this);\n        this.handleHover = this.handleHover.bind(this);\n        this.clickOnMail = this.clickOnMail.bind(this);\n        this.logOut = this.logOut.bind(this);\n    }\n\n    updateInputIcon(event) {\n        this.setState(\n            { emptyInput: (!event.target.value > 0) ? true : false, userId: event.target.value }\n        )\n    }\n\n    handleHover() {\n        this.setState(prevState => ({ isHovered: !prevState.isHovered }))\n    }\n\n    clickOnMail(event) {\n        this.setState({ clickOnMail: true, accountCreated: true, loadCandidateList: true, emptyInput: true })\n        document.getElementById(\"form\").reset();\n    }\n\n    logOut() {\n        this.setState({ clickOnMail: false, accountCreated: false, loadCandidateList: false, emptyInput: true });\n    }\n\n    render() {\n        const text1 = !this.state.clickOnMail ? \"Login\" : \"Logout\";\n        const text2 = !this.state.clickOnMail ? \"Please enter your ID to access the ballot\" : \"Please quit if this ID is not yours\";\n        const logged = \"logged as \" + this.state.userId + \" !\";\n        const btnStyle = this.state.isHovered ? { cursor: 'pointer' } : {};\n        const candidatesLoaded = this.state.loadCandidateList;\n        let candidates;\n\n        //Display Candidate list only if the user is logged\n        if (candidatesLoaded) {\n            candidates = <CandidateList />;\n        }\n        else{\n            candidates = <br/>;\n        }\n\n        return (\n            <div className=\"App\">\n\n                {/*App title */}\n                <div id= \"image\" className=\"container zindex-modal\"> <img \n      src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Postech_Logotype.svg/2000px-Postech_Logotype.svg.png\"\n      alt=\"new\" \n      />                     </div>\n<div id='text' className=\"container zindex-modal\"> \n                    <h1 className=\"my-4 text-center\">\n                        Blockchain-based voting platform\n                </h1>\n                    <hr className=\"bg-light\" />\n\n                    <div>\n                        <div id=\"registration-form\" className=\"py-3\">\n                            <div>\n                                <h1>{text1}</h1>\n                                <p>{text2}</p>\n                            </div>\n                            <form id=\"form\">\n\n                                {/* Input field to log in*/}\n                                <div className={this.state.clickOnMail ? 'input-section email-section fold-up' : 'input-section email-section'}  >\n                                    <input className=\"email\" onChange={this.updateInputIcon} type=\"email\" placeholder=\"ENTER YOUR ID HERE\" autoComplete=\"off\" />\n                                    <div className=\"animated-button\">\n                                        <span className={this.state.emptyInput ? 'icon-paper-plane' : 'icon-paper-plane next'}>\n                                            <i className=\"fa fa-envelope-o\" />\n                                        </span>\n                                        <span className=\"next-button email\" style={btnStyle} onMouseEnter={this.handleHover} onMouseLeave={this.handleHover} onClick={this.clickOnMail}>\n                                            <i className=\"fa fa-arrow-up\"></i>\n                                        </span>\n                                    </div>\n                                </div>\n\n                                {/* Input field once logged */}\n                                <div className={this.state.clickOnMail ? \"input-section password-section folded\" : \"input-section password-section fold-up\"} >\n                                    <input className=\"password\" type=\"text\" placeholder={logged.toUpperCase()} />\n                                    <div className=\"animated-button\">\n                                        <span className=\"icon-cross\" onClick={this.logOut} >\n                                            <i className=\"fa fa-times\"></i>\n                                        </span>\n                                    </div>\n                                </div>\n\n                            </form>\n                        </div>\n                        {candidates}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport TimePicker from 'react-bootstrap-time-picker';\n\nexport class Admin extends React.Component {\n\n    constructor(props) {\n\n        //used to set the starting day\n        const today = new Date(Date.now());\n        const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n\n        super(props);\n        this.state = {\n\n            //selection : choose between create or manage a voting\n            // create : creation mode\n            // manage : manage mode\n            mode: \"selection\",\n\n            //current step in the voting creation \n            step: 1,\n\n            //Step 1 \n            title: 'Title',\n            startingDay: date,\n            endingDay: date,\n            endTime: 36000,\n            startTime: 36000,\n\n            //Step 2\n            candidates: [],\n\n            //popup for candidate creation\n            popup: false,\n            newCandidate_description: 'Enter here a short description...',\n            newCandidate_image: '',\n            newCandidate_name: 'Name',\n\n            //notify the user when the voting has been created\n            success: false\n        };\n\n        //Set the mode and the step\n        this.setMode = this.setMode.bind(this);\n        this.setStep = this.setStep.bind(this);\n\n        //Set state in step 1\n        this.setTitle = this.setTitle.bind(this);\n        this.setStartingDay = this.setStartingDay.bind(this);\n        this.setEndingDay = this.setEndingDay.bind(this);\n        this.setStartTime = this.setStartTime.bind(this);\n        this.setEndTime = this.setEndTime.bind(this);\n\n        //Manage candidates\n        this.createNewCandidate = this.createNewCandidate.bind(this); //create a new candidate \n        this.addNewCandidate = this.addNewCandidate.bind(this); //add a new candidate to the candidates list\n        this.removeCandidate = this.removeCandidate.bind(this); //delete a candidate\n\n        //Set state in candidate form\n        this.setDescription = this.setDescription.bind(this);\n        this.setName = this.setName.bind(this);\n        this.setImage = this.setImage.bind(this);\n        this.closePopup = this.closePopup.bind(this);\n\n        //set state once the creation is over\n        this.finishCreation = this.finishCreation.bind(this);\n        this.setSuccess = this.setSuccess.bind(this);\n\n        //State reset methods\n        this.reset = this.reset.bind(this); //reset everything\n        this.resetForm = this.resetForm.bind(this); //reset the creation form\n        this.resetCandidateForm = this.resetCandidateForm.bind(this); //reset the candidate form \n        this.resetStep2 = this.resetStep2.bind(this); //reset Step 2\n        this.resetStep1 = this.resetStep1.bind(this); //reset Step 1\n    }\n\n    setMode(e) {\n        this.setState({ mode: e.target.value });\n    }\n\n    setStep(e) {\n        this.setState((prevState) => {\n            if (prevState.step === 1) {\n                return { step: 2 };\n            }\n            else {\n                return { step: 1 };\n            }\n        })\n    }\n\n    //step 1 methods\n\n    setTitle(e) {\n        this.setState({ title: e.target.value });\n    }\n\n    setStartTime(time) {\n        this.setState({ startTime: time });\n    }\n\n    setEndTime(time) {\n        this.setState({ endTime: time });\n    }\n\n    setEndingDay(e) {\n        this.setState({ endingDay: e.target.value });\n    }\n\n    setStartingDay(e) {\n        this.setState({ startingDay: e.target.value });\n    }\n\n    //step 2 methods\n\n    createNewCandidate(e) {\n        e.preventDefault();\n        this.setState({ popup: true })\n    }\n\n    removeCandidate(index) {\n        let temp = this.state.candidates.slice();\n        temp.splice(index, 1);\n        this.setState({ candidates: temp });\n    }\n\n    //Methods in candidate form\n\n    setName(e) {\n        this.setState({ newCandidate_name: e.target.value });\n    }\n\n    setImage(e) {\n        this.setState({ newCandidate_image: e.target.value });\n    }\n\n    setDescription(e) {\n        this.setState({ newCandidate_description: e.target.value });\n    }\n\n    closePopup() {\n        this.setState({ popup: false });\n    }\n\n    addNewCandidate(e) {\n        e.preventDefault();\n        let temp = this.state.candidates.slice();\n        var newCandidate = '{\"name\": \"' + this.state.newCandidate_name + '\", \"description\": \"' + this.state.newCandidate_description + '\", \"image\" :\"' + this.state.newCandidate_image + '\"}';\n        var newCandidate = newCandidate.replace(/\\\\/g, '\\\\\\\\');\n        temp.push(JSON.parse(newCandidate));\n        this.setState({ candidates: temp });\n        this.resetCandidateForm();\n        this.closePopup();\n    }\n\n    //Methods once the creation is over\n\n    finishCreation() {\n        this.reset();\n        this.setSuccess();\n    }\n\n    setSuccess() {\n        this.setState((prevState) => {\n            if (this.state.success) {\n                return { success: false }\n            }\n            else {\n                return { success: true };\n            }\n        })\n    }\n\n    //reset methods\n\n    reset() {\n        this.resetForm();\n        this.setState({ mode: \"selection\" });\n    }\n\n    resetForm() {\n        this.resetStep2();\n        this.resetStep2();\n        this.setState({ step: 1 })\n    }\n\n    resetStep1() {\n        //used to set the starting day\n        const today = new Date(Date.now());\n        const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n        this.setState({ startingDay: date, endingDay: date, endTime: 36000, startTime: 36000, title: 'Title' });\n    }\n\n    resetStep2() {\n        this.resetCandidateForm();\n        this.setState({ candidates: [] });\n    }\n\n    resetCandidateForm() {\n        this.setState({ popup: false, newCandidate_description: \"Enter here a short description...\", newCandidate_image: '', newCandidate_name: 'Name' });\n    }\n\n    render() {\n\n        switch (this.state.mode) {\n\n            //Display buttons so that the admin can either choose to create a new voting or manage an existing one\n            case \"selection\":\n                return (\n                    <div className=\"App\">\n                        <div id=\"image\" className=\"container zindex-modal\"> <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Postech_Logotype.svg/2000px-Postech_Logotype.svg.png\" alt=\"new\"/>                     </div>\n                        <div id='text' className=\"container zindex-modal\">\n                            <a href=\"#\" style={{ textDecoration: \"none\" }} onClick={this.reset}>\n                                <h1 className=\"my-4 text-center\">\n                                    Blockchain-based voting platform\n                                </h1>\n                            </a>\n                            <hr className=\"bg-light\" />\n\n                            {/*Notification displayed when a voting is created*/}\n                            <div className={this.state.success ? \"alert alert-success\" : \"d-none\"} role=\"alert\">\n                                <button type=\"button\" onClick={this.setSuccess} className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n                                <strong>Success!</strong> Your voting has been created !\n                            </div>\n\n                            {/*Buttons to select the mode*/}\n                            <div id=\"Selection\" className='container'>\n                                <button value=\"create\" className=\"btn-3\" onClick={this.setMode}>Create a ballot</button>\n                                <button value=\"manage\" className=\"btn-3\" onClick={this.setMode}>Manage your ballot</button>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n            //Display the form to create a new voting\n            case \"create\":\n                return (\n                    <div className=\"App\">\n\n                        {/* Div which contains the popup to display when the user want to create a new candidate */}\n                        <div className={(this.state.popup) ? \"pop-up \" : \"d-none\"} >\n\n                            {/* Form for voting creation */}\n                            <div id=\"popup\" className=\"box \">\n                                <button onClick={this.closePopup} href=\"#\" className=\"close-button\">\n                                    <i className=\"fa fa-times\"></i>\n                                </button>\n                                <h3>New candidate</h3>\n                                <form >\n                                    <fieldset className=\"section is-active\">\n                                        <input type=\"text\" name=\"Name\" id=\"Name\" value={this.state.newCandidate_name} onChange={this.setName} />\n                                        <textarea name=\"Description\" cols=\"40\" rows=\"5\" value={this.state.newCandidate_description} onChange={this.setDescription}></textarea>\n                                        <div className=\"custom-file-upload\">\n                                            <input type=\"file\" id=\"image\" name=\"image\" value={this.state.newCandidate_image} onChange={this.setImage} />\n                                        </div>\n                                    </fieldset>\n                                </form>\n                                <button className=\"button\" onClick={this.addNewCandidate}>Create candidate</button>\n                            </div>\n\n                        </div>\n\n                        {/* Form for voting creation */\n                        /* First div is used to blur the whole screen when the candidate creation pop-up is displayed */}\n                        <div id='text' className={(this.state.popup ? \"blur-in container zindex-modal\" : \" container zindex-modal\")}>\n\n                            {/* Application Header */}\n                            <a href=\"#\" style={{ textDecoration: \"none\" }} onClick={this.reset}>\n                                <h1 className=\"my-4\">\n                                    VOTTY <br /> Blockchain-based voting platform\n                            </h1>\n                            </a>\n                            <hr />\n\n                            {/* Form for voting creation */}\n                            <div className=\"container container-form\">\n                                <div className=\"wrapper\">\n\n\n                                    {/* Voting creation is split into two steps */\n                                    /* Step 1 : Voting informations */\n                                    /* Step 2 : Candidates informations */}\n                                    <ul className=\"steps\">\n                                        <li className={(this.state.step === 1) ? \"is-active\" : \"\"}>Step 1</li>\n                                        <li className={(this.state.step === 2) ? \"is-active\" : \"\"}>Step 2</li>\n                                    </ul>\n\n                                    <form className=\"form-wrapper\">\n\n                                        {/* Step 1 */}\n                                        <fieldset className={(this.state.step === 1) ? \"section is-active\" : \"section\"}>\n                                            <h3>Details</h3>\n                                            <input type=\"text\" name=\"title\" id=\"title\" value={this.state.title} onChange={this.setTitle} />\n                                            <input type=\"date\" name=\"start\" id=\"start\" value={this.state.startingDay} min={this.state.startingDay} onChange={this.setStartingDay} />\n                                            <TimePicker start=\"10:00\" end=\"21:00\" value={this.state.startTime} step={30} onChange={this.setStartTime} />\n                                            <input type=\"date\" name=\"end\" id=\"end\" value={this.state.endingDay} min={this.state.endingDay} onChange={this.setEndingDay} />\n                                            <TimePicker start=\"10:00\" end=\"21:00\" value={this.state.endTime} step={30} onChange={this.setEndTime} />\n                                            <div className=\"button\" onClick={this.setStep}>Next</div>\n                                        </fieldset>\n\n                                        {/* Step 2 */}\n                                        <fieldset className={(this.state.step === 2) ? \"section is-active\" : \"section\"}>\n                                            <table id=\"candidateList\">\n                                                <tbody>\n                                                    {this.state.candidates.map((candidate, index) =>\n                                                        <tr key={index}>\n                                                            <td>{index}. </td>\n                                                            <td>{candidate.name}</td>\n                                                            <td><a onClick={() => this.removeCandidate(index)}><i className=\"fa fa-minus\"></i></a></td>\n                                                        </tr>\n                                                    )}\n                                                </tbody>\n                                            </table>\n                                            <button onClick={this.createNewCandidate} className=\"add-candidate\">+</button>\n                                            <div className=\"reset\" onClick={this.resetForm}>Reset Form</div>\n                                            <div className=\"button\" onClick={this.finishCreation}>Create</div>\n                                        </fieldset>\n\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                );\n            case \"manage\":\n                return (\n                    <div className=\"App\">\n                        <div id='text' className=\"container zindex-modal\">\n                            <a href=\"#\" style={{ textDecoration: \"none\" }} onClick={this.reset}>\n                                <h1 className=\"my-4\">\n                                    VOTTY <br /> Blockchain-based voting platform\n                            </h1>\n                            </a>\n                            <hr />\n                        </div>\n                    </div>\n                );\n            default:\n                return (<div>null</div>);\n        }\n\n    }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Register } from './components/Register.jsx';\nimport { Admin } from './components/Admin.jsx';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route exact path=\"/\" component={Register} />\n          <Route exact path=\"/admin\" component={Admin} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/voldemort.f17ee71f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/darkvador.6fef9033.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thanos.528a2263.jpg\";"],"sourceRoot":""}